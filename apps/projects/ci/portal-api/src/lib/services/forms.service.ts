/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Form } from '../models/form';
import { formsGet } from '../fn/forms/forms-get';
import { FormsGet$Params } from '../fn/forms/forms-get';
import { formsSync } from '../fn/forms/forms-sync';
import { FormsSync$Params } from '../fn/forms/forms-sync';
import { SyncPayloadDaoForm } from '../models/sync-payload-dao-form';

@Injectable({ providedIn: 'root' })
export class FormsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `formsSync()` */
  static readonly FormsSyncPath = '/Forms/Sync';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `formsSync()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  formsSync$Response(params: FormsSync$Params, context?: HttpContext): Observable<StrictHttpResponse<SyncPayloadDaoForm>> {
    return formsSync(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `formsSync$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  formsSync(params: FormsSync$Params, context?: HttpContext): Observable<SyncPayloadDaoForm> {
    return this.formsSync$Response(params, context).pipe(
      map((r: StrictHttpResponse<SyncPayloadDaoForm>): SyncPayloadDaoForm => r.body)
    );
  }

  /** Path part for operation `formsGet()` */
  static readonly FormsGetPath = '/Forms/Get';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `formsGet()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  formsGet$Response(params: FormsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Form>>> {
    return formsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `formsGet$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  formsGet(params: FormsGet$Params, context?: HttpContext): Observable<Array<Form>> {
    return this.formsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Form>>): Array<Form> => r.body)
    );
  }

}
